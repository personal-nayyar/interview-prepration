DripCapital
-----------

Merchant-analytics

INDEXING on DATABASE
	id |name | address | phone | email | gender
Cluster and non-cluster


Different types of queries:-
             INDEXING INCREASE THE THROUGHPUT
Select   YES
Insert   NO
Update   NO
Delete   NO



25 Horses
We can race 5 at a time
Want to know fastest 3 horses out of all 25
How many races will it take ?


SOLID PRINCIPLES
DESIGN PATTERNS
 - CREATIONAL
    - SINGLETON
    - FACTORY
    - ABSTRACT FACTORY
    - BUILDER
 - STRUCTURAL
    - ADAPTER
    - DECORATOR
 - BEHAVIORAL
    - OBSERVER
    - STRATEGY

Find missing and repeating number in an array:-

Multithreading concepts:
    - is a way of executing multiple tasks(thread) at the same time within a process.

- Thread
- Runnable -> does not return anything
	class MyRunnable implements Runnable {
		public void run() {
			// code
		}
	}

	class MyThread extends Thread {
		public void run() {
			// code
		}
	}

	main() {
		MyRunnable r = new MyRunnable();
		Thread t = new Thread(r);
		Tread t1 = new MyThread();
		t.start();
		t1.start();
	}

- ExecutorService
   class ExecutorServiceExample {
   	public static void main(String[] args) {
   	    ExecutorService executor = Executors.newFixedThreadPool(4);
		for (int i = 0; i < 10; i++) {
   	        Runnable worker = new MyThread("Thread" + i);
   	        executor.execute(worker);
   	      }

   	}
   }

- Callable -> return value and throws exception
- Future -> result of a asynchronous computation 
	- blocking operation
		Future<Integer> futureResult = executor.submit(() -> {
            Thread.sleep(2000);
            return 42;
        });

        System.out.println("Doing other work while waiting for result...");

        // Blocking call to get the result
        int result = futureResult.get();


- CompletableFuture -> 
	- non blocking operation
	- advanced version of Future that can be used to chain multiple asynchronous operations together
		CompletableFuture<Integer> completableFuture = CompletableFuture.supplyAsync(() -> {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                throw new IllegalStateException(e);
            }
            return 42;
        });

        System.out.println("Doing other work while waiting for result...");

        // Non-blocking call to handle the result asynchronously
        completableFuture.thenAccept(result -> System.out.println("Result: " + result));

        // Main thread continues execution without waiting for the completion of the CompletableFuture
        Thread.sleep(3000); // Wait a bit to see the output
